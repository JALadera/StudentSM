Student Management System Development Plan Summary
Tech Stack: Django + Vue 3 (Vite) + Axios + JWT Authentication
Core Features:

Student profiles management
Subject enrollment tracking
Grade management (Activities, Quizzes, Exams)
Full CRUD operations via RESTful API
10-Stage Development Plan:
Project Setup - Initialize Django & Vue projects, directory structure
Django Models - Student, Subject, Grade models with relationships
JWT Authentication - User auth system with JWT tokens
REST API - Complete CRUD endpoints for all models
API Validation - Error handling and input validation
Vue Foundation - App structure, routing, Axios setup
Frontend Components - Student, Subject, Grade management UI
Integration - Connect frontend to backend APIs
UI/UX Polish - Styling and responsive design
Testing & Deployment - Testing and production preparation
            1. View and manage student profiles            2. Display a list of subjects per student            3. Show detailed grade breakdown (activities, quizzes, exams)            4. Add/edit grades
* Implement basic UI/UX practices for navigation and data input.  include full CRUD (Create, Read, Update, Delete) functionality.


use the color theme of netflix
follow this file structures.
comment the filepath for each code
make sure that the commands are for powershell

frontend/
├── src/
│   ├── assets/                # Static assets
│   ├── components/
│   │   ├── auth/
│   │   │   ├── LoginForm.vue
│   │   │   └── TeacherProfile.vue
│   │   ├── common/
│   │   │   ├── NavBar.vue
│   │   │   └── SideMenu.vue
│   │   ├── enrollment/
│   │   │   ├── EnrollmentForm.vue
│   │   │   └── SectionSelector.vue
│   │   └── grades/
│   │       ├── GradeTable.vue
│   │       └── GradeForm.vue
│   ├── views/
│   │   ├── auth/
│   │   │   ├── LoginView.vue
│   │   │   └── ProfileView.vue
│   │   ├── dashboard/
│   │   │   └── DashboardView.vue
│   │   ├── students/
│   │   │   ├── StudentListView.vue
│   │   │   └── StudentDetailView.vue
│   │   └── grades/
│   │       ├── GradeBookView.vue
│   │       └── AssessmentView.vue
│   ├── services/
│   │   └── api/
│   │       ├── auth.js
│   │       ├── students.js
│   │       ├── subjects.js
│   │       └── grades.js
│   ├── store/
│   │   ├── auth.js
│   │   ├── students.js
│   │   └── grades.js
│   └── router/
│       └── index.js
└── vite.config.js



backend/
├── apps/
│   ├── authentication/
│   │   ├── models.py             # Custom User model
│   │   ├── serializers.py        # Auth serializers
│   │   ├── views.py             # Auth views
│   │   └── urls.py              # Auth URLs
│   ├── students/
│   │   ├── models.py            # Student, Section models
│   │   ├── serializers.py       # Student serializers
│   │   ├── views.py            # Student views
│   │   └── urls.py             # Student URLs
│   ├── subjects/
│   │   ├── models.py            # Subject, Enrollment models
│   │   ├── serializers.py       # Subject serializers
│   │   ├── views.py            # Subject views
│   │   └── urls.py             # Subject URLs
│   └── grades/
│       ├── models.py            # Activity, Quiz, Exam, Grade models
│       ├── serializers.py       # Grade serializers
│       ├── views.py            # Grade views
│       └── urls.py             # Grade URLs
└── config/
    ├── settings.py             # Project settings
    └── urls.py                # Main URL configuration


// auth.js functions
login(credentials)
logout()
refreshToken()
updateProfile(data)
resetPassword(email)
// students.js functions
registerStudent(data)
bulkRegisterStudents(data)
getStudentList(filters)
getStudentDetail(id)
updateStudent(id, data)
deleteStudent(id)
assignToSection(studentId, sectionId)
// subjects.js functions
createSubject(data)
getSubjectList()
getSubjectDetail(id)
updateSubject(id, data)
deleteSubject(id)
enrollStudent(subjectId, studentId)
bulkEnroll(subjectId, studentIds)
checkPrerequisites(subjectId, studentId)
// grades.js functions
createActivity(data)
createQuiz(data)
createExam(data)
getGradeBook(sectionId)
updateGrades(gradeData)
bulkUpdateGrades(gradesData)
calculateFinalGrades(sectionId)
exportGrades(sectionId)

/api/auth/
├── login/                  [POST]
├── refresh/                [POST]
├── profile/                [GET, PUT]
└── reset-password/         [POST]

/api/students/
├── /                      [GET, POST]
├── /<id>/                 [GET, PUT, DELETE]
├── /bulk-register/        [POST]
└── /<id>/section/         [PUT]

/api/subjects/
├── /                      [GET, POST]
├── /<id>/                 [GET, PUT, DELETE]
├── /<id>/prerequisites/   [GET]
└── /<id>/enroll/         [POST]

/api/grades/
├── /activities/           [GET, POST]
├── /quizzes/             [GET, POST]
├── /exams/               [GET, POST]
├── /gradebook/<section>/  [GET]
└── /bulk-update/         [PUT]



curl -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQ4OTQ3NDA0LCJpYXQiOjE3NDg5NDM4MDQsImp0aSI6IjFiOGUxYTRmZDVmZjQ3NzQ4MGVhMmU5OTNjMmFlNmVhIiwidXNlcl9pZCI6Mn0.MHgszAwlrOd4IJ8xESuhHgPYH3xG6epdhRN3EkWANEo" http://localhost:8000/api/grades/dashboard-test/
